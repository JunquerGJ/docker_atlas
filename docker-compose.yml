version: "3.2"
services:
  db:
    image: postgres
    ports:
      - "5430:5432"
    environment: 
      POSTGRES_PASSWORD_FILE : /run/secrets/dbRootPass
      POSTGRES_USER_FILE : /run/secrets/dbRootUser
    secrets:
      - dbRootPass
      - dbUser
      - dbName
      - dbUserPass
      - dbRootUser
    volumes:
      - type: bind
        source: ./initializeDB.sh 
        target: /docker-entrypoint-initdb.d/00.sh
      - type: volume
        source: dbData 
        target: /var/lib/postgresql/data
  back:
    depends_on:
     - db
    image: junquergj/atlas-backend
    environment:
     DATABASE_URL:
    ports:
     - "5000:5000"
    secrets:
     - CRYPTOCERT
     - CRYPTOKEY
     - DATABASE_URL
     - JWT_SECRET
     - PW_KEYGENERATOR
     - PORT
     - PW_ALGORITHM
     - dbName
     - dbUser
     - dbUserPass
     - TOKEN_DURATION
  front:
    image: nginx:alpine
    secrets:
     - PORT
    environment:
      PORT: /run/secrets/PORT
    ports:
     - "443:443"
    secrets:
     - NGINX_CRYPTOCERT
     - NGINX_CRYPTOKEY
    volumes:
     - type: bind
       source: ./docker_atlasfrontend/dist/atlas-frontend
       target: /usr/share/nginx/html
     - type: bind
       source: ./docker_atlasfrontend/nginx.conf
       target: /etc/nginx/conf.d/default.conf
secrets:
  dbRootUser:
    external:
     name: dbRootUser
  dbRootPass:
   external:
    name: dbRootPass
  dbUser:
   external:
    name: dbUser
  dbName:
   external:
    name: dbName
  dbUserPass:
   external: 
    name: dbUserPass
  CRYPTOCERT:
    external:
     name: CRYPTOCERT
  CRYPTOKEY:
   external:
    name: CRYPTOKEY
  DATABASE_URL:
   external:
    name: DATABASE_URL
  JWT_SECRET:
   external:
    name: JWT_SECRET
  PW_KEYGENERATOR:
   external: 
    name: PW_KEYGENERATOR
  PORT:
   external:
     name: PORT
  PW_ALGORITHM:
   external:
     name: PW_ALGORITHM
  TOKEN_DURATION:
    external:
     name: TOKEN_DURATION
  NGINX_CRYPTOCERT:
    external:
     name: NGINX_CRYPTOCERT
  NGINX_CRYPTOKEY:
    external:
     name: NGINX_CRYPTOKEY
volumes:
 dbData:
